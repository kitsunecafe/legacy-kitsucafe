{
    "componentChunkName": "component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js",
    "path": "/blog/beefs-adventure/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Kitsune Cafe","social":[{"name":"twitter","url":"https://twitter.com/GrumpyMochan"},{"name":"github","url":"https://github.com/mochancrimthann"},{"name":"itchio","url":"https://mochancrimthann.itch.io/"},{"name":"steam","url":"https://steamcommunity.com/id/samsamsamoyed"}]}},"blogPost":{"id":"160afb8c-5ca8-518b-86c4-b40cb9f69d26","excerpt":"For my 15th anniversary with my wife, I decided to make a game as much from scratch as possible.  Play it here .  Check out the code here…","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Making an HTML5 Game in Two Weeks\",\n  \"date\": \"2022-05-29T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"For my 15th anniversary with my wife, I decided to make a game as much from scratch as possible. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://mochancrimthann.itch.io/beefs-adventure\"\n  }, \"Play it here\"), \". \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/mochancrimthann/beefs-adventure\"\n  }, \"Check out the code here\"), \". My goals were to make it focused on a character that she loves, Beef, and that it should be as cute as possible.\"), mdx(\"p\", null, \"I decided from the outset to use ECS and HTML5 as the foundation for the tech stack. I\\u2019ve used \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/EnderShadow8/wolf-ecs\"\n  }, \"wolf-ecs\"), \" in the past but I recently learned that \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/NateTheGreatt/bitECS\"\n  }, \"bitECS\"), \" will be the foundation for Phaser 4 so I went with that. Spoiler: I experienced no noticable differences between them.\"), mdx(\"p\", null, \"My first goal was to get a sprite on screen. That was actually pretty easy, though I may\\u2019ve cheated a bit. I used a small helper meant for game jams for interacting with WebGL, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/bitnenfer/tiny-canvas\"\n  }, \"tiny-canvas\"), \". Working with ECS in Javascript isn\\u2019t like ECS in Unity/C# or Rust. Most Javascript ECS frameworks rely on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"\n  }, \"TypedArrays\"), \" in order to maximize performance. This means that data store is limited to floats and integers. Anything else needs to be stored elsewhere. My usual workaround is to store the data in a separate array and then store that index in ECS. For example, textures are stored this way in Beef\\u2019s Adventure. The SpriteSheet component will store the array index containing the texture. In order to retrieve the data all it must do is access \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"world.textures[SpriteSheet.texture[eid]]\"), \" (where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eid\"), \" is its own entity ID).\"), mdx(\"p\", null, \"In retropect I had made one major mistake at this point. I hadn\\u2019t abstracted screen space from world space at all. This caused me major headaches later when I implemented a camera.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/blog/beefs-adventure/","title":"Making an HTML5 Game in Two Weeks","tags":[],"date":"May 29, 2022","image":null,"imageAlt":null,"imageCaptionText":null,"imageCaptionLink":null,"socialImage":null},"previous":{"id":"ca72d51b-b714-5e60-8d1e-3259aefa3812","excerpt":"I worked on a Roguelike game from 8 March 2022 to 22 April 2022. My motivations were to teach myself new things, develop my existing skills…","slug":"/blog/45dr-postmortem/","title":"45 Day Roguelike Postmortem","date":"April 22, 2022"},"next":null},"pageContext":{"id":"160afb8c-5ca8-518b-86c4-b40cb9f69d26","previousId":"ca72d51b-b714-5e60-8d1e-3259aefa3812","maxWidth":1380}},
    "staticQueryHashes": ["1083777997","2554972630","2744905544","3090755652","764694655"]}