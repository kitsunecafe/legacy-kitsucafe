---
title: Making an HTML5 Game in Two Weeks
date: 2022-05-29
---

For my 15th anniversary with my wife, I decided to make a game as much from scratch as possible. [Play it here](https://mochancrimthann.itch.io/beefs-adventure). [Check out the code here](https://github.com/mochancrimthann/beefs-adventure). My goals were to make it focused on a character that she loves, Beef, and that it should be as cute as possible.

I decided from the outset to use ECS and HTML5 as the foundation for the tech stack. I've used [wolf-ecs](https://github.com/EnderShadow8/wolf-ecs) in the past but I recently learned that [bitECS](https://github.com/NateTheGreatt/bitECS) will be the foundation for Phaser 4 so I went with that. Spoiler: I experienced no noticable differences between them.

My first goal was to get a sprite on screen. That was actually pretty easy, though I may've cheated a bit. I used a small helper meant for game jams for interacting with WebGL, [tiny-canvas](https://github.com/bitnenfer/tiny-canvas). Working with ECS in Javascript isn't like ECS in Unity/C# or Rust. Most Javascript ECS frameworks rely on [TypedArrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) in order to maximize performance. This means that data store is limited to floats and integers. Anything else needs to be stored elsewhere. My usual workaround is to store the data in a separate array and then store that index in ECS. For example, textures are stored this way in Beef's Adventure. The SpriteSheet component will store the array index containing the texture. In order to retrieve the data all it must do is access `world.textures[SpriteSheet.texture[eid]]` (where `eid` is its own entity ID).

In retropect I had made one major mistake at this point. I hadn't abstracted screen space from world space at all. This caused me major headaches later when I implemented a camera.
